{"version":3,"sources":["../src/event-emitter.ts"],"sourcesContent":["export type EmitterEvent = {\n  [key: string]: any;\n  [key: number]: any;\n};\n\nexport type EventType<T extends EmitterEvent> = new (...args: any[]) => T;\nexport type EventListener<T extends EmitterEvent> = (event: T) => void;\ntype ListenerArray<T extends EmitterEvent> = Array<[EventListener<T>, boolean] | undefined>;\ntype EmitterFunction<T extends EmitterEvent> = (event: T, listeners: ListenerArray<T>) => number;\n\nclass EventDispatcher {\n  public readonly dispatch: EmitterFunction<EmitterEvent>;\n  constructor(\n    public readonly size: number,\n  ) {\n    let code = 'var len = arr.length, count = 0, li;';\n    for (let i = 0; i < size; i++) {\n      code += `\\nif(${i} === len) return count;`;\n      code += `\\nif(li = arr[${i}]){ if(li[1]) arr[${i}] = undefined; li[0](ev); count++; }`;\n    }\n    code += `\\nif(${size} === len) return count;`;\n    code += `\\nthrow new RangeError('Dispatch function too small: ' + len + ' > ${size}');`;\n    // eslint-disable-next-line no-new-func\n    this.dispatch = new Function('ev', 'arr', code) as EmitterFunction<EmitterEvent>;\n  }\n}\n\nexport class EventEmitter {\n  protected readonly listenerMap: Map<EventType<EmitterEvent>, ListenerArray<never>> = new Map();\n  protected eventDispatcher: EventDispatcher;\n  constructor(dispatchSize: number = 10) {\n    this.eventDispatcher = new EventDispatcher(dispatchSize);\n  }\n\n  public once<T extends EmitterEvent>(event: EventType<T>, listener: EventListener<T>): this {\n    return this.add(event, listener, true);\n  }\n\n  public on<T extends EmitterEvent>(event: EventType<T>, listener: EventListener<T>): this {\n    return this.add(event, listener);\n  }\n\n  public off<T extends EmitterEvent>(event: EventType<T>, listener?: EventListener<T>): this {\n    if (listener) {\n      const listeners = this.listenerMap.get(event);\n      if (listeners) {\n        const filtered = this.filter(listeners, listener);\n        if (filtered.length > 0) {\n          this.listenerMap.set(event, filtered);\n        }\n        else {\n          this.listenerMap.delete(event);\n        }\n      }\n    }\n    else {\n      this.listenerMap.delete(event);\n    }\n    return this;\n  }\n\n  public emit<T extends EmitterEvent>(event: T): number {\n    const type = event.constructor as EventType<T>;\n    const listeners = this.listenerMap.get(type) as ListenerArray<EmitterEvent> | undefined;\n    if (listeners) {\n      return this.eventDispatcher.dispatch(event, listeners);\n    }\n    return 0;\n  }\n\n  public listeners<T extends EmitterEvent>(event: EventType<T>): EventListener<T>[] {\n    const listeners = this.listenerMap.get(event) as ListenerArray<T> | undefined;\n    const filtered = [];\n    if (listeners) {\n      const length = listeners.length;\n      for (let i = 0; i < length; i++) {\n        const entry = listeners[i];\n        entry && filtered.push(entry[0]);\n      }\n    }\n    return filtered;\n  }\n\n  public events(): EventType<EmitterEvent>[] {\n    return Array.from(this.listenerMap.keys());\n  }\n\n  public clear(): this {\n    this.listenerMap.clear();\n    return this;\n  }\n\n  protected add<T extends EmitterEvent>(\n    event: EventType<T>,\n    listener: EventListener<T>,\n    once: boolean = false,\n  ): this {\n    const listeners = this.listenerMap.get(event);\n    const entry: [EventListener<T>, boolean] = [listener, once];\n    let count = 1;\n    if (listeners) {\n      const filtered = this.filter(listeners, listener);\n      filtered.push(entry);\n      this.listenerMap.set(event, filtered);\n      count = filtered.length;\n    }\n    else {\n      this.listenerMap.set(event, [entry]);\n    }\n    if (count > this.eventDispatcher.size) {\n      // dynamically increase dispatch size\n      this.eventDispatcher = new EventDispatcher(count + 10);\n    }\n    return this;\n  }\n\n  protected filter<T extends EmitterEvent>(\n    arr: ListenerArray<T>,\n    listener: EventListener<T>,\n  ): ListenerArray<T> {\n    const filtered = [];\n    const length = arr.length;\n    for (let i = 0; i < length; i++) {\n      const entry = arr[i];\n      if (entry && entry[0] !== listener) {\n        filtered.push(entry);\n      }\n    }\n    return filtered;\n  }\n}\n"],"mappings":"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","names":[]}